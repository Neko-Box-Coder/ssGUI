cmake_minimum_required(VERSION 3.14)
set (CMAKE_CXX_STANDARD 11)
# For Clang to do parsing
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ==========================================================
# Example 
# ==========================================================

# set the project name and version
project(example VERSION 1.0)

# TODO : Project information 
configure_file(ProjectConfig.hpp.in ProjectConfig.hpp)

# add the executable
# add_executable(example ./Examples/CharacterLevelAdjustment.cpp)
add_executable(example "./Tests/FramerateTest.cpp")

# For projectconfig.hpp in build folder
target_include_directories(example PUBLIC "${PROJECT_BINARY_DIR}")

# ==========================================================
# Variables 
# ==========================================================

set(OUTPUT_STATIC "TRUE" CACHE STRING "Use and create static library instead")

#Find shared libraries in the same location as the executable
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath -Wl,$ORIGIN")

# Use different library directory depending on the static or shared
set(LIB_LOCATION "${PROJECT_SOURCE_DIR}/../libs")
if ("${OUTPUT_STATIC}")
    set(LIB_LOCATION "${LIB_LOCATION}/static")
else()
    set(LIB_LOCATION "${LIB_LOCATION}/shared")
endif()

set(INCLUDE_LOCATION "${PROJECT_SOURCE_DIR}/../include")

target_include_directories(example PUBLIC "${INCLUDE_LOCATION}")
set(CMAKE_CXX_FLAGS "-fpermissive -std=c++0x")  #For surpressing goto warning

# ==========================================================
# ssGUI 
# ==========================================================
if("${OUTPUT_STATIC}")
    add_library(ssGUI STATIC
    "${PROJECT_SOURCE_DIR}/ssGUI/ssGUIManager.cpp"
    "${PROJECT_SOURCE_DIR}/ssGUI/Factory.cpp"
)
else()
    add_library(ssGUI SHARED
    "${PROJECT_SOURCE_DIR}/ssGUI/ssGUIManager.cpp"
    "${PROJECT_SOURCE_DIR}/ssGUI/Factory.cpp"
)
endif()

# If you are on 32 bit linux, uncomment this
# set (CMAKE_CXX_FLAGS "-m32")
# set (CMAKE_C_FLAGS "-m32")

add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/Backend")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/Backend/SFML")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/DataClasses")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/EventCallbacks")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/Extensions")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/GUIObjectClasses")
add_subdirectory("${PROJECT_SOURCE_DIR}/ssGUI/GUIObjectClasses/CompositeClasses")

target_include_directories(ssGUI PUBLIC "${INCLUDE_LOCATION}")


# Copy resources 
file(   COPY "${PROJECT_SOURCE_DIR}/Resources"
        DESTINATION "${PROJECT_BINARY_DIR}") 

# ==========================================================
# clip 
# ==========================================================

# Disable clip examples and tests
set(CLIP_EXAMPLES OFF CACHE BOOL "Compile clip examples")
set(CLIP_TESTS OFF CACHE BOOL "Compile clip tests")

# In case that you have ${PNG_LIBRARY} set to support copy/paste images on Linux
#set(CLIP_X11_PNG_LIBRARY "${PNG_LIBRARY}")

# Add clip subdirectory to compile the library
add_subdirectory("${PROJECT_SOURCE_DIR}/clip")

target_include_directories(clip PUBLIC "${PROJECT_SOURCE_DIR}/clip")

# Linking clip to ssGUI
target_link_libraries(ssGUI PUBLIC clip)


# ==========================================================
# SFML 
# ==========================================================

set(SFML_DIR "${LIB_LOCATION}/SFML/lib/cmake/SFML")
message("${SFML_DIR}")

# target_link_options(ssGUI PRIVATE -mwindows) # uncomment to disabling console on Windows
if("${OUTPUT_STATIC}")
    set(SFML_STATIC_LIBRARIES TRUE)
endif()

# Import SFML
find_package(SFML 3 COMPONENTS System Window Graphics Network Audio REQUIRED)
target_link_libraries(ssGUI PUBLIC SFML::Network SFML::Audio SFML::Graphics SFML::Window SFML::System)

# Link the library
target_link_libraries(example PUBLIC ssGUI)