Title: üëü Getting Started

Section: üóÑÔ∏è What makes up ssGUI:

ssGUI is mainly made up of:

- *GUI objects* are mainly divided into 2 category, <ssGUI::Window> and <ssGUI::Widget>. All GUI Objects are derived from either of those two.

- *Extensions* provide additional functionality to a GUI object. This can be in the form of visual changes, logic changes, or both.

- *Event Callbacks* is what allows ssGUI to be event based if needed. There are a number of built-in event callbacks you can utilize to run code based on different events.

- *Backends* is what ssGUI relies on in order to render or poll inputs from the system. ssGUI is designed in a way that the GUI code is not dependent on the backend. 

    Though you can create conditional checks or pre-proccessor checks and perform backend specific actions if needed.

- <ssGUI::ssGUIManager> is the default way provided by ssGUI to update and render all the GUI objects. You can subscribe to different events in ssGUIManager to run different code at different stages of the update loop.

You can even override the default way of rendering if needed. For more details about writing your own GUI Manager, please see (WIP). 

‚†Ä

Section: üïí Lifetime managerment:

For *GUI Objects*, you can either create it on the stack, or on the heap using <ssGUI::Factory::Create>.

Normally you don't need to manage the lifetime of GUI Objects if you have (recursively) parented it to a <ssGUI::MainWindow>

‚†Ä

For *Extensions*, you can only create them using <ssGUI::Factory::Create>.

The same goes to any Extensions, if you have attached the extension to a GUI object, you don't need to manage the lifetime of it as well.

However, if it is not attached to any GUI Objects, you will need to deallocate it using <ssGUI::Factory::Dispose> when you are done with it.

‚†Ä

For <ssGUI::ssGUIManager> however, you will need to manage the lifetime of it. Normally, creating in the stack should do the job.

‚†Ä

For *data objects* such as <ssGUI::Font> or <ssGUI::ImageData>, 

they can be created on either way but you will have to manage the life time of it.  