Title: Creating A Custom Widget Or Window

Section: ‚õèÔ∏è WIP

Section: Header [Outdated üóëÔ∏è]
This is the header template for creating a custom widget. Just replace widget with window for custom window.
(Remove the "//" for the C++ divider for Natural Docs to work properly when parsing)

================================= C++ ===================================
#ifndef SSGUI_CUSTOM_WIDGET
#define SSGUI_CUSTOM_WIDGET

#include "ssGUI/GUIObjectClasses/Widget.hpp"

//namespace: ssGUI
namespace ssGUI
{
    /*class: ssGUI::CustomWidget
    Your class description here.

    Variables & Constructor:
    //============================== C++ ==============================
    protected:
        //Your variables go here
    //=================================================================
    //============================== C++ ==============================
    CustomWidget::CustomWidget() : [Your variables initialization]
    {}
    //=================================================================
    */
    class CustomWidget : public Widget
    {
        private:
            CustomWidget& operator=(CustomWidget const& other) = default;

        protected:
            //Your variables go here

            CustomWidget(CustomWidget const& other);
            virtual void ConstructRenderInfo() override;

            virtual void MainLogic(ssGUI::Backend::BackendSystemInputInterface* inputInterface, ssGUI::InputStatus& inputStatus, 
                                    ssGUI::GUIObject* mainWindow) override;
        public:
            CustomWidget();
            virtual ~CustomWidget() override;
            
            //function: GetType
            //See <Widget::GetType>
            virtual ssGUI::Enums::GUIObjectType GetType() const override;

            //function: Clone
            //See <Widget::Clone>
            virtual CustomWidget* Clone(bool cloneChildren) override;
    };
}

#endif
======================================================================

Section: Source [Outdated üóëÔ∏è]
This is the source template for creating a custom widget. Just replace widget with window for custom window.

================================= C++ ===================================
#include "ssGUI/GUIObjectClasses/CustomWidget.hpp"

#include "ssGUI/GUIObjectClasses/MainWindow.hpp" //For getting mouse position

namespace ssGUI
{
    CustomWidget::CustomWidget(CustomWidget const& other) : Widget(other)
    {
        //Copy the values here.
    }
    
    //You only need to override this when you are rendering anything.
    void CustomWidget::ConstructRenderInfo()
    {
        //Get the top-left position of the widget 
        glm::vec2 drawPosition = GetGlobalPosition();

        //You can do you drawing here.
        //You can get the rendering details with DrawingVerticies, DrawingUVs, DrawingColours, DrawingCounts and DrawingProperties
    }

    void CustomWidget::MainLogic(ssGUI::Backend::BackendSystemInputInterface* inputInterface, ssGUI::InputStatus& inputStatus, 
                                ssGUI::GUIObject* mainWindow)
    {
        //Main logic here
    }
    
    CustomWidget::CustomWidget()// : [Your variables constructions go here]
    {
        /*If you have any claen-up need to do when this GUI Object is desttroyed, put it in OnObjectDestroyEventCallback.
        So something like:

        ssGUI::EventCallbacks::OnObjectDestroyEventCallback* callback = nullptr;
        if(IsEventCallbackExist(ssGUI::EventCallbacks::OnObjectDestroyEventCallback::EVENT_NAME))
        {
            callback = static_cast<ssGUI::EventCallbacks::OnObjectDestroyEventCallback*>
                (GetEventCallback(ssGUI::EventCallbacks::OnObjectDestroyEventCallback::EVENT_NAME));
        }
        else
        {
            callback = ssGUI::Factory::Create<ssGUI::EventCallbacks::OnObjectDestroyEventCallback>();
            AddEventCallback(callback);
        }
        
        callback->AddEventListener(
            [](ssGUI::GUIObject* src, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* references)
            {
                //Do your clean up here.
            });
        */
    }

    CustomWidget::~CustomWidget()
    {
        NotifyAndRemoveOnObjectDestroyEventCallbackIfExist();
    }

    //You don't have to override this. If you do want to return your own type, 
    //just edit the GUIObjectType and return it along with WIDGET
    ssGUI::Enums::GUIObjectType CustomWidget::GetType() const
    {
        return ssGUI::Enums::GUIObjectType::WIDGET;
        //return ssGUI::Enums::GUIObjectType::WIDGET | ssGUI::Enums::GUIObjectType::YOUR_OWN_TYPE;
    }

    //You will always need to override this in order to call the copy constructor
    CustomWidget* CustomWidget::Clone(bool cloneChildren)
    {
        FUNC_DEBUG_ENTRY();
        CustomWidget* temp = new CustomWidget(*this);
        CloneExtensionsAndEventCallbacks(temp);   
        
        if(cloneChildren)
        {
            if(CloneChildren(this, temp) == nullptr)
            {
                FUNC_DEBUG_EXIT();
                return nullptr;
            }
        }

        FUNC_DEBUG_EXIT();
        return temp;
    }
}
======================================================================