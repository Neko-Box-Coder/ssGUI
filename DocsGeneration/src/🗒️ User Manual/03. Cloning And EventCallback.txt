Title: ‚â• Cloning And EventCallback

Group: üîΩ Readme Example

Hopefully by now, you are able to get ssGUI compiling and building. 

To test it, we can try running the readme example 
(If you have *ssGUI_BUILD_EXAMPLES* option on in CMake, you should be able to find it under *ssGUI/Examples/ReadmeExampleV7* in you binary folder)

================================== C++ ==================================
#include "ssGUI/HeaderGroups/StandardGroup.hpp"
#include "ssGUI/Extensions/Layout.hpp"

//Readme example
using namespace ssGUI::Enums;
int main()
{
    ssGUI::MainWindow mainWindow;
    mainWindow.SetRenderSize(glm::vec2(450, 80));
    mainWindow.AddExtension<ssGUI::Extensions::Layout>();

    auto* text = mainWindow.AddChild<ssGUI::Text>();
    text->SetText("Click on the button to show the message");
    
    auto* button = mainWindow.AddChildWithWrapper<ssGUI::StandardButton>(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER);
    button->SetSize(glm::vec2(50, 30));
                                                                                
    ssGUI::ssGUIManager guiManager;
    guiManager.AddRootGUIObject(&mainWindow);
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(button->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                text->SetText(L"(`oœâo¬¥)");
        }
    );
    guiManager.StartRunning();
    return 0;
}
=========================================================================

and hopefully it looks something like this

(See IntroductionExample.gif)

_

We were adding the button to the mainWindow slightly differently compare to text:
================================== C++ ==================================
mainWindow.AddChildWithWrapper<ssGUI::StandardButton>(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER);
=========================================================================

_

Let's add the button without using <AddChildWithWrapper: ssGUI::Hierarchy::AddChildWithWrapper> and see what it will look like

>  mainWindow.AddChild<ssGUI::StandardButton>();

(See 03/withoutLayout.png)

Oof, seems like the button got resized to half of the window by layout.

<ssGUI::Extensions::Layout> controls the position and size of the child GUI objects automatically.

And what <AddChildWithWrapper: ssGUI::Hierarchy::AddChildWithWrapper> basically does is first creating an 
empty GUI Object as the child and then parent the "actual" child to the empty GUI Object so the 
layout extension won't affect the size of it. So something like this:

================================== Text ==================================
mainWindow (which has layout extension)
‚îÇ
‚îî‚îÄ‚ñ∫ empty GUI Object (this is controlled by layout)
    ‚îÇ  
    ‚îî‚îÄ‚ñ∫ your child
==========================================================================

and then finally adding a <positioning extension: ssGUI::Extensions::AdvancedPosition> to do the alignment on it.

_

Then how come the text is not affected?

It is affecting the text GUI Object actually, it's just that the "text" size is controlled by "font size", not the size of the GUI Object itself.

This becomes obvious when we add a border extension to the text to see what it looks like.

================================== C++ ==================================
mainWindow.AddExtension<ssGUI::Extensions::Layout>()->AddPreferredSizeMultiplier(0.5, 0.5);
//...
text->AddExtension<ssGUI::Extensions::Border>()->SetBorderColor(glm::u8vec4(255, 0, 0, 255));
//...
=========================================================================

When you run it (and resize the window to be bigger), you can see it is actually being affected but it doesn't affect the "font size".

(See 03/textBorder.png)

Group: ‚è¨ Infinite Readme Example

Let's try something more exciting (and somewhat practical).

Often times, we need a window or panel inside the "actual" window. Let's do that. 

Most of the code is the same, except we are adding and using <ssGUI::StandardWindow> to hold the text and button.

================================== C++ ==================================
//...
int main()
{
    ssGUI::MainWindow mainWindow;

    //Create a standard window, just a fancier window
    auto* window = mainWindow.AddChild<ssGUI::StandardWindow>();
    
    //We don't need docking
    window->RemoveAnyExtension<ssGUI::Extensions::Dockable>();                          
    window->SetRenderSize(glm::ivec2(450, 80));
    window->AddExtension<ssGUI::Extensions::Layout>();
    //...
    //- auto* text = mainWindow.AddChild<ssGUI::Text>();
    auto* text = window->AddChild<ssGUI::Text>();
    //...
    //- auto* button = mainWindow.AddChildWithWrapper<ssGUI::StandardButton>(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER);
    auto* button = window->AddChildWithWrapper<ssGUI::StandardButton>(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER);
    //...
}
=========================================================================

(See IntroductionExampleAsWindow.gif)

Cool, we now have our cool little window. Often times, we will have multiple GUI Objects
that are mostly similar but with slight difference. 

Creating each of them from the ground up doesn't sound too feasible, that's why we have a clone function.
Let's add a button to clone our window.

================================== C++ ==================================
//...
#include "ssGUI/Extensions/AdvancedPosition.hpp"

int main()
{
    //...

    //A button for cloning the window
    auto* cloneButton = mainWindow.AddChild<ssGUI::StandardButton>();
    cloneButton->GetButtonTextObject()->SetText("Clone!!");

    //We create an create an extension for positioning the button easily
    auto posExt = cloneButton->AddExtension<ssGUI::Extensions::AdvancedPosition>();
    
    //Setting it to be 20 pixels from the bottom of the parent   
    posExt->SetVerticalAlignment(AlignmentVertical::BOTTOM);
    posExt->SetVerticalPixel(20);
    
    //...                                 
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(button.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                text.SetText(L"(`oœâo¬¥)");
            
            //If the button is clicked, we want to clone the window
            if(cloneButton.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                window.Clone(true);
        }
    );
    //...
}
=========================================================================

(See 03/cloningWindow.gif)

But wait, what is this?

(See 03/clonedWindowButtonClicking.gif)

It seems like the buttons on the cloned windows are not working, why is that?

The problem is in this section of the code

================================== C++ ==================================
    //...
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(button.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                text.SetText(L"(`oœâo¬¥)");
            
            //...
=========================================================================

We are checking only the button from the original window, not the ones that we cloned.

And we are modifying the text of the original window.

Checking each and all buttons every frame will be quite painful.

Remember *EventCallbacks* I mentioned earlier in <üëü Getting Started>? Here's where we need to use it.

================================== C++ ==================================
//...
int main()
{
    //...
    
    //First we get the event callback for button state changed, it is attached to buttons by default.
    auto* buttonEventCallback =  button->GetEventCallback(ssGUI::Enums::EventType::BUTTON_STATE_CHANGED);
    
    //Then we add the text GUI Object to be referenced in the listener, 
    //  and pass the reference ID to the listener lambda
    ssGUI::ssGUIObjectIndex textId = buttonEventCallback->AddObjectReference(text);
    buttonEventCallback->AddEventListener
    (
        "listenerKey",
        [textId](ssGUI::EventInfo info)
        {
            auto* textToChange = info.References->GetObjectReference<ssGUI::Text>(textId);
            auto* currentButton = static_cast<ssGUI::StandardButton*>(info.Container);
            if(currentButton->GetButtonState() == ButtonState::CLICKED)
                textToChange->SetText(L"(`oœâo¬¥)");
        }
    );

    //...
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            //We don't need to check the button for changing text anymore...
            //- if(button->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
            //-     text->SetText(L"(`oœâo¬¥)");

            //If the button is clicked, we want to clone the window
            if(cloneButton.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                window.Clone(true);
        }
    );
    //...
}
=========================================================================

(See 03/cloningWindowWithOR.gif)

> ‚ö†Ô∏è Don't worry if you don't get it, EventCallback might not seem intuitive at first, 
>   but it will be once you have used it multiple times. 
>   Everything else are a lot more straightforwards than this. 

Now the cloned button will still work even if you parent the text to something else, as long as the text is not deleted.

If it is, <ssGUI::ObjectsReferences::GetObjectReference> will return nullptr which you can check against.

> You can find source code under ssGUI/Src/Examples/CloningExampleV3