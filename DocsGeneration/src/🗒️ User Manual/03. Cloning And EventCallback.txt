Title: ‚â• Cloning And EventCallback

Group: üîΩ Readme Example

Hopefully by now, you are able to get ssGUI compiling and building. 

To test it, we can try running the readme example 
(If you have *ssGUI_BUILD_EXAMPLES* option on in CMake, you should be able to find it under *ssGUI/Examples/ReadmeExampleV6* in you binary folder)

================================== C++ ==================================
#include "ssGUI/HeaderGroups/StandardGroup.hpp"
#include "ssGUI/Extensions/Layout.hpp"

//Readme example
using namespace ssGUI::Enums;
int main()
{
    ssGUI::MainWindow mainWindow;                                               //Create the main window for showing content
    mainWindow.SetRenderSize(glm::vec2(450, 80));
    auto* layout = mainWindow.AddExtension<ssGUI::Extensions::Layout>();        //Add layout for auto sizing child GUI objects

    auto* text = mainWindow.AddChild<ssGUI::Text>();                            //Create a text widget and set the respective properties
    text->SetNewTextFontSize(17);
    text->SetText("Click on the button to show the message");
    text->SetAlignment(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER); //We center the text right above the button we will be adding later
    
    auto* button = ssGUI::Create<ssGUI::StandardButton>();                      //Create a standard button, just a fancier button.
    button->SetSize(glm::vec2(50, 30));
    layout->AddChildWithAlignment(button,   AlignmentHorizontal::CENTER,        //Attach button to main window with alignment, so that the size
                                            AlignmentVertical::CENTER);         //      stays the same and won't be changed by layout
                                                                                
    ssGUI::ssGUIManager guiManager;                                             //Create the GUIManager, which manages the flow of the program.
    guiManager.AddRootGUIObject(&mainWindow);                                   //Add the main window (which has both text and button parented to it)
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(button->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)  //Then we want to check if the button is pressed every frame
                text->SetText(L"(`oœâo¬¥)");                                      //If it is, we change the text to a cute little face :)
        }
    );
    guiManager.StartRunning();                                                  //Finally we start running the program
    return 0;
}
=========================================================================

and hopefully it looks something like this

(See IntroductionExample.gif)

_

We were adding the button to the mainWindow slightly differently compare to text:
================================== C++ ==================================
//layout is the extension we attached to mainWindow, we are parenting *button* using it
layout->AddChildWithAlignment(&button,  AlignmentHorizontal::CENTER, 
                                        AlignmentVertical::CENTER);
=========================================================================

_

Let's add the button without using <AddChildWithAlignment: ssGUI::Extensions::Layout::AddChildWithAlignment> and see what it will look like

>  mainWindow.AddChild<ssGUI::StandardButton>();

(See 03/withoutLayout.png)

Oof, seems like the button got resized to half of the window by layout.

<ssGUI::Extensions::Layout> controls the position and size of the child GUI objects automatically.

And what <AddChildWithAlignment: ssGUI::Extensions::Layout::AddChildWithAlignment> basically does is first creating an 
empty GUI Object as the child and then parent the "actual" child to the empty GUI Object so the 
layout extension won't affect the size of it. So something like this:

================================== Text ==================================
mainWindow (which has layout extension)
‚îÇ
‚îî‚îÄ‚ñ∫ empty GUI Object (this is controlled by layout)
    ‚îÇ  
    ‚îî‚îÄ‚ñ∫ your child
==========================================================================

and then finally adding a <positioning extension: ssGUI::Extensions::AdvancedPosition> to do the alignment on it.

_

Then how come the text is not affected?

It is affecting the text GUI Object actually, it's just that the "text" size is controlled by "font size", not the size of the GUI Object itself.

This becomes obvious when we add a border extension to the text to see what it looks like.

================================== C++ ==================================
//...
layout->AddPreferredSizeMultiplier(0.5, 0.5);                               //By default the text takes very little space, 
//...                                                                       //we can set both text and the button(wrapper) to take the same amount of space
text->AddExtension<ssGUI::Extensions::Border>()->                           //Set the border color to red to make it more obvious
    SetBorderColor(glm::u8vec4(255, 0, 0, 255));
=========================================================================

When you run it (and resize the window to be bigger), you can see it is actually being affected but it doesn't affect the "font size".

(See 03/textBorder.png)

Group: ‚è¨ Infinite Readme Example

Let's try something more exciting (and somewhat practical).

Often times, we need a window inside the "actual" window. Let's do that. 

Most of the code is the same, except we are adding and using <ssGUI::StandardWindow> to hold the text and button.

================================== C++ ==================================
//...
#include "ssGUI/Extensions/Dockable.hpp"

//Readme example
using namespace ssGUI::Enums;
int main()
{
    ssGUI::MainWindow mainWindow;

    auto* window = mainWindow.AddChild<ssGUI::StandardWindow>();                        //Create a standard window, just a fancier window
    window->RemoveAnyExtension<ssGUI::Extensions::Dockable>();                          //We don't need docking
    window->SetRenderSize(glm::ivec2(450, 80));                                         //Render size same as before
    auto layout = window->AddExtension<ssGUI::Extensions::Layout>();                    //Add layout for auto sizing child GUI objects
    
    auto* text = window->AddChild<ssGUI::Text>();                                       //Create a text widget and set the respective properties
    //...
    
    auto* button = ssGUI::Create<ssGUI::StandardButton>();                              //Create a standard button, just a fancier button.
    //...
}
=========================================================================

(See IntroductionExampleAsWindow.gif)

Cool, we now have our cool little window. Often times, we will have multiple GUI Objects
that are mostly similar but with slight difference. 

Creating each of them from the ground up doesn't sound too feasible, that's why we have a clone function.
Let's add a button to clone our window.

================================== C++ ==================================
//...
#include "ssGUI/Extensions/AdvancedPosition.hpp"

using namespace ssGUI::Enums;
int main()
{
    //...

    auto* cloneButton = mainWindow.AddChild<ssGUI::StandardButton>();                   //A button for cloning the window
    cloneButton->GetButtonTextObject()->SetText("Clone!!");                             //Text for indication
    auto posExt = cloneButton->AddExtension<ssGUI::Extensions::AdvancedPosition>();     //We create an create an extension for positioning the button easily
    posExt->SetVerticalAlignment(AlignmentVertical::BOTTOM);                            //By default, it centers the GUI Object relative to its parent, we are setting it bottom 
    posExt->SetVerticalPixel(20);                                                       //Setting it to be 20 pixels from the bottom of the parent   
    
    //...                                 
    guiManager.AddRootGUIObject((ssGUI::GUIObject*)&mainWindow);                        //Add the main window (which has both text and button parented to it)
    (
        [&]()
        {
            if(button.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)           //Then we want to check if the button is pressed every frame
                text.SetText(L"(`oœâo¬¥)");                                               //If it is, we change the text to a cute little face :)
            
            if(cloneButton.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)      //If the button is clicked, we want to clone the window
                window.Clone(true);
        }
    );
    //...
}
=========================================================================

(See 03/cloningWindow.gif)

But wait, what is this?

(See 03/clonedWindowButtonClicking.gif)

It seems like the buttons on the cloned windows are not working, why is that?

The problem is in this section of the code

================================== C++ ==================================
    //...
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(button.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)       //Then we want to check if the button is pressed every frame
                text.SetText(L"(`oœâo¬¥)");                                           //If it is, we change the text to a cute little face :)
            
            //...
=========================================================================

We are checking only the button from the original window, not the ones that we cloned.
It will be quite messy if we have quite a few windows and need the button to change the 
corresponding "cloned text".

Checking each and all buttons every frame not only is not efficient but also difficult to pass into the listener.

Even worse, what happens if one the window is closed and the button object got deallocated?
Now you are accessing random memory and very likely to lead to segfault.

Remember *EventCallbacks* I mentioned earlier in <üëü Getting Started>? Here's where we need to use it.

================================== C++ ==================================
//...
using namespace ssGUI::Enums;
int main()
{
    //...
    
    //First we get the event callback for button state changed, it is attached to buttons by default.
    auto* buttonEventCallback =  button->GetEventCallback(ssGUI::Enums::EventType::BUTTON_STATE_CHANGED);
    
    //Then we add the text GUI Object to be referenced in the listener, 
    //and pass the reference ID to the listener lambda
    ssGUI::ssGUIObjectIndex textId = buttonEventCallback->AddObjectReference(text);
    buttonEventCallback->AddEventListener
    (
        "listenerKey",
        [textId](ssGUI::EventInfo info)
        {
            auto* textToChange = info.References->GetObjectReference<ssGUI::Text>(textId);
            auto* currentButton = static_cast<ssGUI::StandardButton*>(info.Container);
            if(currentButton->GetButtonState() == ButtonState::CLICKED)
                textToChange->SetText(L"(`oœâo¬¥)");
        }
    );

    //...
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            //We don't need to check the button for changing text anymore...
            
            if(cloneButton.GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)      //If the button is clicked, we want to clone the window
                window.Clone(true);
        }
    );
    //...
}
=========================================================================

(See 03/cloningWindowWithOR.gif)

> ‚ö†Ô∏è Don't worry if you don't get it, EventCallback might not seem intuitive at first, 
>   but it will be once you have used it multiple times. 
>   Everything else are a lot more straightforwards than this. 

Now the cloned button will still work even if you parent the text to something else, as long as the text is not deleted.

If it is, <ssGUI::ObjectsReferences::GetObjectReference> will return nullptr which you can check against.

Group: Source Code

The final code looks like this
================================== C++ ==================================
#include "ssGUI/HeaderGroups/StandardGroup.hpp"
#include "ssGUI/Extensions/Layout.hpp"
#include "ssGUI/Extensions/Dockable.hpp"
#include "ssGUI/Extensions/AdvancedPosition.hpp"

using namespace ssGUI::Enums;
int main()
{
    ssGUI::MainWindow mainWindow;
    
    auto* window = mainWindow.AddChild<ssGUI::StandardWindow>();                        //Create a standard window, just a fancier window
    window->RemoveAnyExtension<ssGUI::Extensions::Dockable>();                          //We don't need docking
    window->SetRenderSize(glm::ivec2(450, 80));                                         //Render size same as before
    auto layout = window->AddExtension<ssGUI::Extensions::Layout>();                    //Add layout for auto sizing child GUI objects
    
    auto* text = window->AddChild<ssGUI::Text>();                                       //Create a text widget and set the respective properties
    text->SetNewTextFontSize(17);
    text->SetText("Click on the button to show the message");
    text->SetAlignment(AlignmentHorizontal::CENTER, AlignmentVertical::CENTER);         //We center the text right above the button we will be adding later
    
    auto* button = ssGUI::Create<ssGUI::StandardButton>();                              //Create a standard button, just a fancier button.
    button->SetSize(glm::vec2(50, 30));
    layout->AddChildWithAlignment(button,   AlignmentHorizontal::CENTER,                //Attach button to main window with alignment, so that the size
                                            AlignmentVertical::CENTER);                 //      stays the same and won't be changed by layout
    
    //First we get the event callback for button state changed, it is attached to buttons by default.
    auto* buttonEventCallback =  button->GetEventCallback(ssGUI::Enums::EventType::BUTTON_STATE_CHANGED);
    
    //Then we add the text GUI Object to be referenced in the listener, 
    //and pass the reference ID to the listener lambda
    ssGUI::ssGUIObjectIndex textId = buttonEventCallback->AddObjectReference(text);
    buttonEventCallback->AddEventListener
    (
        "listenerKey",
        [textId](ssGUI::EventInfo info)
        {
            auto* textToChange = info.References->GetObjectReference<ssGUI::Text>(textId);
            auto* currentButton = static_cast<ssGUI::StandardButton*>(info.Container);
            if(currentButton->GetButtonState() == ButtonState::CLICKED)
                textToChange->SetText(L"(`oœâo¬¥)");
        }
    );

    auto* cloneButton = mainWindow.AddChild<ssGUI::StandardButton>();                   //A button for cloning the window
    cloneButton->GetButtonTextObject()->SetText("Clone!!");                             //Text for indication
    auto posExt = cloneButton->AddExtension<ssGUI::Extensions::AdvancedPosition>();     //We create an create an extension for positioning the button easily
    posExt->SetVerticalAlignment(AlignmentVertical::BOTTOM);                            //By default, it centers the GUI Object relative to its parent, we are setting it bottom 
    posExt->SetVerticalPixel(20);                                                       //Setting it to be 20 pixels from the bottom of the parent   

    ssGUI::ssGUIManager guiManager;                                                     //Create the GUIManager, which manages the flow of the program.
    guiManager.AddRootGUIObject((ssGUI::GUIObject*)&mainWindow);                        //Add the main window (which has both text and button parented to it)
    guiManager.AddPostGUIUpdateEventListener                                    
    (
        [&]()
        {
            if(cloneButton->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)     //If the button is clicked, we want to clone the window
                window->Clone(true);
        }
    );
    guiManager.StartRunning();                                                          //Finally we start running the program
    return 0;
}
=========================================================================
