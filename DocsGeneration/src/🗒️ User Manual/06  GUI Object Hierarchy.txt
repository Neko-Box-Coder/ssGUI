Title: ü™ú GUI Object Hierarchy

As you might have known, you can parent different GUI Objects to other GUI Objects. 

Which means this can form a hierarchy of GUI objects. Below is an example:

This would be the hierarchy of the whole scene:
================================== Text ==================================
mainWindow
‚îÇ
‚îî‚îÄ‚ñ∫ window
    ‚îÇ  
    ‚îú‚îÄ‚ñ∫ window2
    ‚îÇ   ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚ñ∫ text
    ‚îÇ
    ‚îú‚îÄ‚ñ∫ window3
    ‚îÇ  
    ‚îî‚îÄ‚ñ∫ window4

===========================================================================

(See HierarchyExample.png)

Section: üó∫Ô∏è Child Position

All the (recursive) children of a parent inherits the parent's position. Meaning the children follows the position of the parent.

(see Mask.gif)

Section: üñåÔ∏è Draw And Update Order

When rendering the scene, the *draw order* is from *root to children*.

This is because we want to have children drawn *in front of* the parent, 

meaning it is *drawn last* over the *already drawn* parent.

‚†Ä

This is however, the opposite for the update order.

When updating the status and running the GUI Objects' logic in the scene,

the order goes from *children to root*.

This is because we want the children to receive any input and react to it *first*.

It *wouldn't makes sense* for the window to receive the mouse click and react before the button does.

And finally the GUI Objects are updated first *before* it gets drawn so any reaction to the input or any events are *immediately drawn*.

‚†Ä


Below is the visualization of the draw and update order

================================== Text ==================================
mainWindow              
‚îÇ                       
‚îî‚îÄ‚ñ∫ window              
    ‚îÇ                                       
    ‚îú‚îÄ‚ñ∫ window2         ‚ñ≤                   ‚îÇ
    ‚îÇ   ‚îÇ               ‚îÇ                   ‚îÇ 
    ‚îÇ   ‚îî‚îÄ‚ñ∫ text        ‚îÇ Update Order      ‚îÇ Draw Order
    ‚îÇ                   ‚îÇ                   ‚îÇ
    ‚îú‚îÄ‚ñ∫ window3         ‚îÇ                   ‚ñº
    ‚îÇ                   
    ‚îî‚îÄ‚ñ∫ window4         

===========================================================================

Source Code:
========================================= C++ ==============================================
#include "ssGUI/HeaderGroups/StandardGroup.hpp"
#include "ssGUI/DebugAndBuild/ssGUIBuildAndDebugConfig.hpp"
#include "ssGUI/Extensions/Layout.hpp"
#include "ssGUI/Extensions/Border.hpp"
#include "ssGUI/Extensions/AdvancedPosition.hpp"

int main()
{
    //Create the main window
    ssGUI::MainWindow mainWindow;
    mainWindow.SetSize(glm::ivec2(450, 650));

    //A window for holding 3 more windows
    ssGUI::Window window;
    window.SetSize(glm::vec2(300, 600));
    window.SetParent(&mainWindow);
    window.AddExtension(ssGUI::Factory::Create<ssGUI::Extensions::Layout>());
    window.SetBackgroundColor(glm::u8vec4(180, 180, 180, 255));
    
    //The 3 windows with different titlebar color
    ssGUI::Window window2;
    window2.SetTitlebarColor(glm::u8vec4(255, 127, 127, 255));
    window2.SetParent(&window);
    ssGUI::Window window3;
    window3.SetTitlebarColor(glm::u8vec4(127, 255, 127, 255));
    window3.SetParent(&window);
    ssGUI::Window window4;
    window4.SetTitlebarColor(glm::u8vec4(127, 127, 255, 255));
    window4.SetParent(&window);

    //Create a text widget and set the respective properties
    ssGUI::Text text;
    text.SetText("Some Text");
    text.SetSize(glm::vec2(150, 30));
    text.SetHorizontalAlignment(ssGUI::Enums::TextAlignmentHorizontal::CENTER);
    text.SetVerticalAlignment(ssGUI::Enums::TextAlignmentVertical::CENTER);
    text.AddExtension(ssGUI::Factory::Create<ssGUI::Extensions::Border>());             //Adding border to better visualize the text widget
    text.AddExtension(ssGUI::Factory::Create<ssGUI::Extensions::AdvancedPosition>());   //AdvancedPosition for centering the text widget
    text.SetParent(&window2);

    //Create the GUIManager, add the main window and start running
    ssGUI::ssGUIManager guiManager;
    guiManager.AddGUIObject((ssGUI::GUIObject*)&mainWindow);
    guiManager.StartRunning();
    return 0;
}
============================================================================================
