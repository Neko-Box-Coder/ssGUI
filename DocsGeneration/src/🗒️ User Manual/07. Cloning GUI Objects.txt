Title: üñáÔ∏è Cloning GUI Objects

When you have a hierarchy of GUI Objects, 

it is good to be able to clone GUI objects *including their children (and recursively)*.

‚†Ä

Luckily, ssGUI does provide such functionality, 

by calling the <ssGUI::GUIObject::Clone> function which has the option

to clone only the GUI Object or together with the children recursively.

‚†Ä

That is all fine and well until the GUI object (or children) you are cloning *references some other GUI Objects*.

Then things get complicated.

For example, if your button changes an attribute of another GUI Object under the same parent (recursively) that will be cloned.

‚†Ä

This is why <ssGUI::ObjectsReferences> exists. 

The job of this class is to track all the references between the GUI object and other GUI objects

and map the references correctly and automatically when the GUI objects being cloned or deleted.

Section: Example

As an example, we have a window that can be cloned by hitting the "Enter" key.

And inside that window, we have a text widget and button which the text changes when the button is pressed.

(See CloningExample.gif)

============================= C++ =============================
//...

//Create a window
ssGUI::StandardWindow window;

//Create a text widget and set the respective properties
ssGUI::Text text;

//Create a button and set an event callback to change the text when it is clicked
ssGUI::StandardButton button;

//...

//By default, button has state changed event callback attached to it
//Gets the event callback for the button state change
auto ecb = button.GetAnyEventCallback<ssGUI::EventCallbacks::ButtonStateChangedEventCallback>();
ecb->AddEventListener
(
    "AnyKey",
    [&](ssGUI::GUIObject* src, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* refs)
    {
        //When the button is clicked, sets the text
        if(static_cast<ssGUI::Button*>(container)->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
            text.SetText(L"(`oœâo¬¥)");
    }
);

//Create the GUIManager, add the main window and start running
ssGUI::ssGUIManager guiManager;

//When the user presses Enter, clone the window
guiManager.AddPostGUIUpdateEventListener
(
    [&]()
    {
        ssGUI::Backend::BackendSystemInputInterface* inputInterface = guiManager.GetBackendInputInterface();
        
        if(inputInterface->GetCurrentKeyPresses().IsSystemKeyPresent(ssGUI::Enums::SystemKey::ENTER) &&
            !inputInterface->GetLastKeyPresses().IsSystemKeyPresent(ssGUI::Enums::SystemKey::ENTER))
        {
            window.Clone(true)->SetPosition(glm::vec2(window.GetPosition().x + 10, window.GetPosition().y + 10));
        }
    }
);

//...
===============================================================

The expected behaviour is to change the text when the button is clicked *under the cloned window*.

But let's see what actually happens instead.

(See CloningExample2.gif)

As you can see, the button under the cloned window is changing the *original text* instead of the cloned one.

If we use <ssGUI::ObjectsReferences>, it will keep track of the references automatically if you add the objects to be referenced.

And it will change the *cloned text* instead.

============================= C++ =============================
//...

//By default, button has state changed event callback attached to it
//Gets the event callback for the button state change
auto ecb = button.GetAnyEventCallback<ssGUI::EventCallbacks::ButtonStateChangedEventCallback>();

//Adds the text widget parented to the window to the event callback so it can be referenced
//<AddObjectReference> return a <ssGUIObjectIndex> which is just an ID you can use to retrieve the text widget back
ssGUI::ssGUIObjectIndex textIndex = ecb->AddObjectReference(&text);
ecb->AddEventListener
(
    "AnyKey",
    [textIndex](ssGUI::GUIObject* src, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* refs)
    {
        //When the button is clicked, sets the text
        if(static_cast<ssGUI::Button*>(container)->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
        {
            ssGUI::Text* text = static_cast<ssGUI::Text*>(refs->GetObjectReference(textIndex));
            text->SetText(L"(`oœâo¬¥)");
        }
    }
);

//...
===============================================================

(See CloningExample3.gif)