Title: üîä Using Event Callback

Until now, we have been using the <ssGUIManager::AddPostGUIUpdateEventListener> to react to any event/changes

by checking the status for all the GUI objects every frame.

This is fine for simple project or code base. But as the codebase grows üå¥, this quickly becomes unsustainable and non-performant.

This is especially true if the user has the ability to create new GUI Objects in runtime.

Section: ‚ùì What is Event Callback

In essence, event callback allows you to assign more than 1 functions to a specific event in order to react to that event 

before or after it has happened.

At the moment, the default event callbacks are slightly lacking and unorganized but this will be looked into in the future (hopefully üòÖ).

There are two types of event callback, inidcated by the name of it:

- OnSomeEventHappenEventCallback: This notifies any listener *before* an event is going to happen

- SomeEventHappenedEventCallback: This notifies any listener *after* an event has just happened either immediately or in the same frame.

Section: üì• Adding event callback to a GUI Object

To create an event callback, we can just do this with <ssGUI::Factory::Create>:

> auto focusLostEvent = ssGUI::Factory::Create<ssGUI::EventCallbacks::FocusLostEventCallback>();

Then we can attach it to any GUI Objects like this:

========================================= C++ ==============================================
ssGUI::Window window;

//...

//Add the event callback
auto focusLostEvent = ssGUI::Factory::Create<ssGUI::EventCallbacks::FocusLostEventCallback>();
window.AddEventCallback(focusLostEvent);
============================================================================================

> ‚ö†Ô∏è Please note that you cannot add the same type of eventCallback multiple times on the same GUI Object

Some of the GUI Objects already has some event callbacks attached since it is used internally.

This is often mentioned in that GUI Object's API, or in the constructor.

To check for a given event callback exists, you can use <ssGUI::EventCallbackManager::IsAnyEventCallbackExist>:

========================================= C++ ==============================================
ssGUI::Window window;

//...

//Check if the event callback exists
if(window.IsAnyEventCallbackExist<ssGUI::EventCallbacks::FocusLostEventCallback>())
{
    //....
}
============================================================================================

To remove a given event callback, you can use <ssGUI::EventCallbackManager::RemoveAnyEventCallback>:

========================================= C++ ==============================================
ssGUI::Window window;

//...

//Remove the event callback if it exists
window.RemoveAnyEventCallbackExist<ssGUI::EventCallbacks::FocusLostEventCallback>();
============================================================================================

Section: üëÇ Adding Listener To A Event Callback

In order to add a listener to a event callback, we first need to get the pointer of it.

You can get a GUI object's event callback by calling <ssGUI::EventCallbackManager::GetAnyEventCallback>

========================================= C++ ==============================================
ssGUI::Window window;

//...

//Get the event callback. If it doesn't exist, this will be a nullptr.
auto eventCallback = window.GetAnyEventCallback<ssGUI::EventCallbacks::FocusLostEventCallback>();
============================================================================================

To add a listener using lambda, you need to call <ssGUI::EventCallbacks::EventCallback::AddEventListener>:

========================================= C++ ==============================================
ssGUI::Window window;

//...

//Get the event callback. If it doesn't exist, this will be a nullptr.
auto eventCallback = window.GetAnyEventCallback<ssGUI::EventCallbacks::FocusLostEventCallback>();

//Add a listener to this event.
eventCallback->AddEventListener
(
    "AnyKey",   //The identifier for this listener. 
                //This is what you need to use in order do anything with this listener
    
    //source is what *triggered* the callback
    //container is the GUI Object that this event callback is added to
    //references are all the GUI object references this listener has, we will talk about this later.
    [](ssGUI::GUIObject* source, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* references)
    {
        //...
    }    
);
============================================================================================

This is how you a listener using an object's function. The function signature must match:

========================================= C++ ==============================================
#include <functional>   //You will need to include this

//..

ssGUI::Window window;

//...

some::class* objectPointer = new some::class();  //Create an object for some::class

//...

//Get the event callback. If it doesn't exist, this will be a nullptr.
auto eventCallback = window.GetAnyEventCallback<ssGUI::EventCallbacks::FocusLostEventCallback>();

//Add a listener to this event.
eventCallback->AddEventListener
(
    "AnyKey",   //The identifier for this listener. 
                //This is what you need to use in order do anything with this listener
    
    //Using <std::bind> to bind an object's function to the listener callback
    std::bind(&some::class::function, objectPointer, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));
);
============================================================================================

Section: Example

Here's a full example of using event callback (Src/Examples/EventCallbackExample.cpp)
========================================= C++ ==============================================
#include "ssGUI/EventCallbacks/RecursiveChildAddedEventCallback.hpp"
#include "ssGUI/HeaderGroups/StandardGroup.hpp"

//Event callback example
int main()
{
    ssGUI::MainWindow mainWindow;

    auto callback = ssGUI::Factory::Create<ssGUI::EventCallbacks::RecursiveChildAddedEventCallback>();
    callback->AddEventListener
    (
        "AnyKey",
        [](ssGUI::GUIObject* src, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* refs) 
        {
            std::cout<<"child added\n";
        }
    );

    mainWindow.AddEventCallback(callback);

    //Creating window
    ssGUI::Window window;
    window.SetSize(glm::vec2(400, 300));
    window.SetPosition(glm::vec2(50, 200));
    window.SetParent(&mainWindow);     //This should trigger the event callback

    //Creating ssGUIManager and run it
    ssGUI::ssGUIManager guiManager;
    guiManager.AddGUIObject((ssGUI::GUIObject*)&mainWindow);
    guiManager.StartRunning();

    return 0;
}
============================================================================================