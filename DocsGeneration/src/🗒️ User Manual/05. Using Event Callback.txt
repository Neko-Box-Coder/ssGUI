Title: Using Event Callback

In order to react to any event, an <ssGUI::EventCallbacks::EventCallback> can be used by attaching it to the target GUI object you want to listen to.

Below is from the readme example with further explaination for the event callback part.

========================================= C++ ==============================================
#include "ssGUI/HeaderGroups/StandardGroup.hpp"
#include "ssGUI/DebugAndBuild/ssGUIBuildAndDebugConfig.hpp"

//Readme example
int main()
{
    //Create the main window
    ssGUI::MainWindow mainWindow;
    mainWindow.SetSize(glm::vec2(450, 125));
    mainWindow.SetResizeType(ssGUI::Enums::ResizeType::NONE);

    //Create a text widget and set the respective properties
    ssGUI::Text text;
    text.SetSize(glm::vec2(450, 60));
    text.SetText("Click on the button to show the message");
    text.SetHorizontalAlignment(ssGUI::Enums::TextAlignmentHorizontal::CENTER);
    text.SetVerticalAlignment(ssGUI::Enums::TextAlignmentVertical::BOTTOM);

    //Create a button and set an event callback to change the text when it is clicked
    ssGUI::Button button;
    button.SetSize(glm::vec2(50, 30));
    button.SetPosition(glm::vec2(200, 75));
    button.GetEventCallback(ssGUI::EventCallbacks::ButtonStateChangedEventCallback::EVENT_NAME)->AddEventListener
    (
        //Key for ability to remove the listener later if needed
        "AnyKey",
        //*src* is the source that causes the event. In the case of <ButtonStateChangedEventCallback>, it would be the button itself.
        //*container* is the GUI Object that this event callback attaches to. *container* doesn't always necessarily the same as *src*.
        //*refs* is a class that holds all references for other GUI objects. This will be further explained and shown in the cloning tutorial. 
        [&](ssGUI::GUIObject* src, ssGUI::GUIObject* container, ssGUI::ObjectsReferences* refs)
        {
            if(((ssGUI::Button*)src)->GetButtonState() == ssGUI::Enums::ButtonState::CLICKED)
                text.SetText("(`oωo´)");
        }
    );

    button.SetParent(&mainWindow);
    text.SetParent(&mainWindow);

    //Create the GUIManager, add the main window and start running
    ssGUI::ssGUIManager guiManager;
    guiManager.AddGUIObject((ssGUI::GUIObject*)&mainWindow);
    guiManager.StartRunning();
    return 0;
}
============================================================================================

There are quite a number of built-in event callbacks you can use which is triggered automatically. 
However, if you want to create you own event callback, you can create one by following the template on <Creating A Custom Event Callback>.

Then you can create it and bind it by: 
> auto eventCallback = ssGUI::Factory::Create<YourEventCallback>();
> eventCallback->BindToObject(AnyGUIObject);

And when there's an event which you want to trigger it, you can just do so by:
> eventCallback->Notify(sourceGUIObject);