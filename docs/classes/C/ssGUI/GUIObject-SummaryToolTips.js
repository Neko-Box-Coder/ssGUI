NDSummary.OnToolTipsLoaded("CClass:ssGUI.GUIObject",{642:"<div class=\"NDToolTip TClass LC\"><div class=\"TTSummary\">Base class for all GUI Objects</div></div>",644:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype644\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::vec2 GetPosition() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the local position against the parent from the anchor point. By default the anchor point is at the top-left corner of the parent.&nbsp; Note that windows excludes title bar from the position calculation. Calling this function on MainWindow object will always return (0, 0)</div></div>",645:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype645\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetPosition(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">position</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the local poisition against the parent from the anchor point</div></div>",646:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype646\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::vec2 GetGlobalPosition() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the global position against the top-left corner of MainWindow it is parented. Title bar is excluded from the position calculation.</div></div>",647:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype647\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetGlobalPosition(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">position</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the global position against the top-left corner of MainWindow it is parented</div></div>",648:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype648\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::vec2 GetSize() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the size of the GUI Object</div></div>",649:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype649\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetSize(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">size</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the size of the GUI Object</div></div>",650:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype650\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::vec2 GetMinSize() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the minimum size of the GUI Object. Setting the size to be below minimum size will set the size to minimum instead.</div></div>",651:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype651\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetMinSize(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">minSize</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the minimum size of the GUI Object. Setting minimum size to be negative infinte is possible.</div></div>",652:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype652\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::vec2 GetMaxSize() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the maximum size of the GUI Object. Setting the size to be above maximum size will set the size to maximum instead.</div></div>",653:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype653\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetMaxSize(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">maxSize</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the maximum size of the GUI Object. Setting maximum size to be infinte is possible.</div></div>",654:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype654\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> ssGUI::GUIObject* GetParent() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the parent of the GUI Object. Nullptr will be returned if there\'s no parent set.</div></div>",670:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype670\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetParent(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">newParent</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the parent of the GUI Object. Setting nullptr will unset the parent.</div></div>",671:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype671\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual int</span> GetChildrenCount() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the number of children parented to this GUI Object. (Non recursive)</div></div>",672:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype672\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> MoveChildrenIteratorToFirst() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Moves the children iterator to the first child. To preserve the current children iterator, use StashChildrenIterator.&nbsp; Please note that if the current children iterator points to a child that is removed then it will be invalid and IsChildrenIteratorEnd will return true.</div></div>",673:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype673\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> MoveChildrenIteratorToLast() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Moves the children iterator to the last child. To preserve the current children iterator, use StashChildrenIterator.&nbsp; Please note that if the current children iterator points to a child that is removed then it will be invalid and IsChildrenIteratorEnd will return true.</div></div>",674:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype674\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> MoveChildrenIteratorNext() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Moves the children iterator to the next child. To preserve the current children iterator, use StashChildrenIterator.&nbsp; Please note that if the current children iterator points to a child that is removed then it will be invalid and IsChildrenIteratorEnd will return true.</div></div>",675:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype675\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> MoveChildrenIteratorPrevious() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Moves the children iterator to the previous child. To preserve the current children iterator, use StashChildrenIterator.&nbsp; Please note that if the current children iterator points to a child that is removed then it will be invalid and IsChildrenIteratorEnd will return true.</div></div>",676:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype676\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsChildrenIteratorLast() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns true if the iterator is on the last child</div></div>",677:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype677\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsChildrenIteratorFirst() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns true if the iterator is on the first child</div></div>",678:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype678\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsChildrenIteratorEnd() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns true if the iterator is <u>beyond</u> the first or last child</div></div>",679:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype679\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> StashChildrenIterator() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Stores the current children iterator on the stack. Any modification will not affect the children iterator.&nbsp; However, if the stashed children iterator points to a child that is removed then the stashed children iterator will be invalid and IsChildrenIteratorEnd will be true when the stashed iterator is restored (popped).</div></div>",680:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype680\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> PopChildrenIterator() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Pops the most recent stashed children iterator back to the current children iterator.&nbsp; Please note that if the stashed children iterator points to a child that is removed then the stashed children iterator will be invalid, meaning IsChildrenIteratorEnd will be true.</div></div>",681:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype681\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual bool</span> FindChild(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">child</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">If a child exists is parented to this GUI Object, this will move the children iterator to it and returns true.&nbsp; Otherwise, the children iterator is untouched and this will return false.&nbsp; To preserve the current children iterator, use StashChildrenIterator.</div></div>",738:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype738\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> ssGUI::GUIObject* GetCurrentChild() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the object the children iterator is currently pointing to. This will remove nullptr if it is not pointing at any child.&nbsp; To check if the current children iterator is valid, use IsChildrenIteratorEnd.</div></div>",739:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype739\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::list&lt;ssGUIObjectIndex&gt;::iterator GetCurrentChildReferenceIterator() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the underlying childrenIterator used for this GUI Object</div></div>",740:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype740\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> ChangeChildOrderToBeforePosition(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\">list&lt;ssGUIObjectIndex&gt;::iterator&nbsp;</td><td class=\"PName last\">child,</td></tr><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\">list&lt;ssGUIObjectIndex&gt;::iterator&nbsp;</td><td class=\"PName last\">position</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Changes the child\'s position to be in front of said position. Use GetCurrentChildReferenceIterator to get the iterator.</div></div>",741:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype741\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> ChangeChildOrderToAfterPosition(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\">list&lt;ssGUIObjectIndex&gt;::iterator&nbsp;</td><td class=\"PName last\">child,</td></tr><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\">list&lt;ssGUIObjectIndex&gt;::iterator&nbsp;</td><td class=\"PName last\">position</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Changes the child\'s position to be in behind of said position. Use GetCurrentChildReferenceIterator to get the iterator.</div></div>",742:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype742\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;ssGUI::GUIObject*&gt; GetListOfChildren() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets a list of children</div></div>",743:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype743\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> Internal_AddChild(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">obj</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">(Internal ssGUI function) Adds the GUI Object to the children record. Use SetParent instead for adding or removing child.</div></div>",744:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype744\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> Internal_RemoveChild(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">obj</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">(Internal ssGUI function) Removes the GUI Object to the children record. Use SetParent instead for adding or removing child.</div></div>",745:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype745\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> ssGUI::Enums::GUIObjectType GetType() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the type of this GUI Object. Note that ssGUI::Enums::GUIObjectType is a bit-operated enum class.</div></div>",746:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype746\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> ssGUI::Enums::AnchorType GetAnchorType() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the anchor type of this GUI Object</div></div>",1275:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1275\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetAnchorType(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::Enums::</td><td class=\"PType\">AnchorType&nbsp;</td><td class=\"PName last\">anchorType</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the anchor type of this GUI Object</div></div>",1276:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1276\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetVisible(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">visible</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the visibility of this GUI Object. Note that the logic of this GUI Object will not be called if not visible.</div></div>",1277:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1277\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsVisible() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the visibility of this GUI Object. Note that the logic of this GUI Object will not be called if not visible.</div></div>",1317:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1317\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetUserCreated(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">created</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the UserCreated flag. True if this GUI Object\'s lifetime is managed explcitly, otherwise managed by ssGUI object/extension.</div></div>",1318:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1318\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsUserCreated() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the UserCreated flag. True if this GUI Object\'s lifetime is managed explcitly, otherwise managed by ssGUI object/extension.</div></div>",1319:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1319\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetBackgroundColor(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">u8vec4&nbsp;</td><td class=\"PName last\">color</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the background color of this GUI Object</div></div>",1320:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1320\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> glm::u8vec4 GetBackgroundColor() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the background color of this GUI Object.</div></div>",1322:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1322\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> Delete() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Delete the current GUI Object. This will unset the parent of this GUI Object and all it\'s references.&nbsp; This will also deletes all of the children GUI Objects. If this is allocated on the heap, it will be deallocated automiactically. Any referencing to this GUI Object after deleted is undefined.</div></div>",1323:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1323\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> Internal_IsDeleted() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">(Internal ssGUI function) This is used to determined if this GUI Object is &quot;deleted&quot; or not.</div></div>",1324:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1324\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> SetHeapAllocated(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">heap</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Sets the HeapAllocated flag of this GUI Object. If true, this object will be deleted from the heap automatically after the Delete function is called.</div></div>",1325:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1325\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsHeapAllocated() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Gets the HeapAllocated flag of this GUI Object. If true, this object will be deleted from the heap automatically after the Delete function is called.</div></div>",1326:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1326\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;glm::vec2&gt;&amp; Extension_GetDrawingVertices() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns a list of vertices for all the shapes that will be drawn by this GUI object.&nbsp; A shape is formed by having the vertices drawn in clockwise direction. Undefined behaviour if they are listed in anti-clockwise direction.&nbsp; This function is mainly be called by &lt;Extension::Draw&gt;.</div></div>",1327:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1327\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;glm::vec2&gt;&amp; Extension_GetDrawingUVs() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the UVs that are mapped to each vertex at the same index location.&nbsp; If no texture is used, you should still maintain the number of UVs same as the number of vertices.&nbsp; This function is mainly be called by &lt;Extension::Draw&gt;.</div></div>",1328:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1328\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;glm::u8vec4&gt;&amp; Extension_GetDrawingColours() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the colors that are mapped to each vertex at the same index location.&nbsp; If texture is used, this essentially affects the tint of the image, with white as no tinting at all.&nbsp; This function is mainly be called by &lt;Extension::Draw&gt;.</div></div>",1329:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1329\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;<span class=\"SHKeyword\">int</span>&gt;&amp; Extension_GetDrawingCounts() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the number of vertices each shape has, with the order same as vertices and others.&nbsp; So for example if the first value is 4, then the first 4 vertices form a shape. So on and so forth...&nbsp; This function is mainly be called by &lt;Extension::Draw&gt;.</div></div>",1330:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1330\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;ssGUI::DrawingProperty&gt;&amp; Extension_GetDrawingProperties() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the property of each shape, mapped to the same index location as Extension_GetDrawingCounts.&nbsp; This indicates if the shape is just a colored shape, an image or font.&nbsp; This function is mainly be called by &lt;Extension::Draw&gt;.</div></div>",1331:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1331\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual int</span> Extension_GetGUIObjectFirstShapeIndex() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the first shape index on the GUI Object for extensions</div></div>",1332:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1332\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual int</span> Extension_GetGUIObjectFirstVertexIndex() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">This returns the first vertex index on the GUI Object for extensions</div></div>",1333:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1333\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> AddExtension(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::Extensions::</td><td class=\"PType\">Extension*&nbsp;</td><td class=\"PName last\">extension</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Adds the extension to this GUI Object. Note that the extension <b>must</b> be allocated on heap.</div></div>",1334:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1334\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> ssGUI::Extensions::Extension* GetExtension(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Gets the extension by the name of it. Nullptr will be returned if not found.</div></div>",1335:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1335\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\">T* GetAnyExtension()</div></div><div class=\"TTSummary\">Generic version of GetExtension.&nbsp; It has to be a different name as template function doesn\'t support inheritance.&nbsp; If it had the same name, the derived version of GetExtension will &quot;hide&quot; the generic version of it and will just throw an error saying the template function is not found.</div></div>",1336:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1336\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;ssGUI::Extensions::Extension*&gt; GetListOfExtensions() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns all the extensions on the GUI Object</div></div>",1337:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1337\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual bool</span> IsExtensionExist(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Returns true if the extension exists on this GUI Object</div></div>",1338:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1338\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">bool</span> IsAnyExtensionExist()</div></div><div class=\"TTSummary\">Generic version of IsExtensionExist.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1339:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1339\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> RemoveExtension(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Removes the extension by the name of it</div></div>",1340:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1340\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">void</span> RemoveAnyExtension()</div></div><div class=\"TTSummary\">Generic version of RemoveExtension.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1341:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1341\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual int</span> GetExtensionsCount() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns the number of extensions on this GUI Object</div></div>",1342:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1342\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual int</span> GetExtensionDrawOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Returns the draw order of the extension by the name of it</div></div>",1343:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1343\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">int</span> GetAnyExtensionDrawOrder()</div></div><div class=\"TTSummary\">Generic version of GetExtensionDrawOrder.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1344:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1344\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> ChangeExtensionDrawOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">order</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Changes the draw order of the extension by the name of it</div></div>",1345:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1345\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> ChangeAnyExtensionDrawOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">order</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Generic version of ChangeExtensionDrawOrder.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1347:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1347\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual int</span> GetExtensionUpdateOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Returns the update order of the extension by the name of it</div></div>",1348:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1348\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">int</span> GetAnyExtensionUpdateOrder()</div></div><div class=\"TTSummary\">Generic version of GetExtensionUpdateOrder.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1349:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1349\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> ChangeExtensionUpdateOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extensionName,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">order</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Changes the update order of the extension by the name of it</div></div>",1350:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1350\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> ChangeAnyExtensionUpdateOrder(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">order</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Generic version of ChangeExtensionUpdateOrder.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1351:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1351\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> AddEventCallback(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::EventCallbacks::</td><td class=\"PType\">EventCallback*&nbsp;</td><td class=\"PName last\">eventCallback</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Adds an eventCallback to this GUI Object</div></div>",1352:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1352\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> ssGUI::EventCallbacks::EventCallback* GetEventCallback(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">eventCallbackName</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Gets the eventCallback by the name of it</div></div>",1353:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1353\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\">T* GetAnyEventCallback()</div></div><div class=\"TTSummary\">Generic version of GetEventCallback.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1354:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1354\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual bool</span> IsEventCallbackExist(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">eventCallbackName</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Returns true if the eventCallback exists on this GUI Object</div></div>",1355:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1355\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">bool</span> IsAnyEventCallbackExist()</div></div><div class=\"TTSummary\">Generic version of IsEventCallbackExist.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1356:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1356\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> RemoveEventCallback(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">eventCallbackName</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Removes the eventCallback by the name of it</div></div>",1357:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1357\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">void</span> RemoveAnyEventCallback()</div></div><div class=\"TTSummary\">Generic version of RemoveEventCallback.&nbsp; Reason for not having the same name can be found in GetAnyExtension</div></div>",1358:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1358\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> std::vector&lt;ssGUI::EventCallbacks::EventCallback*&gt; GetListOfEventCallbacks() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns all the event callbacks on the GUI Object</div></div>",1359:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1359\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> AddTag(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">tag</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Adds a tag to this GUI Object</div></div>",1360:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1360\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> RemoveTag(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">tag</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Removes the tag on this GUI Object</div></div>",1361:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1361\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual bool</span> HasTag(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">std::</td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">tag</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Returns true if the tag exists on this GUI Object</div></div>",1362:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1362\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual void</span> RedrawObject() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Forces the GUI Object to be redrawn. <b>Do not</b> call this in Internal_Draw.</div></div>",1363:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1363\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual bool</span> IsRedrawNeeded() <span class=\"SHKeyword\">const</span> = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">Returns if the GUI Object needs to be redrawn</div></div>",1364:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1364\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">virtual</span> ObjectsReferences* Internal_GetObjectsReferences() = <span class=\"SHNumber\">0</span></div></div><div class=\"TTSummary\">(Internal ssGUI function) Returns the pointer of the ObjectReferences</div></div>",1365:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1365\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> Internal_Draw(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::Backend::</td><td class=\"PType\">BackendDrawingInterface*&nbsp;</td><td class=\"PName last\">drawingInterface,</td></tr><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">mainWindow,</td></tr><tr><td class=\"PModifierQualifier first\">glm::</td><td class=\"PType\">vec2&nbsp;</td><td class=\"PName last\">mainWindowPositionOffset</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">(Internal ssGUI function) Draw function called by ssGUIManager</div></div>",1366:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1366\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual void</span> Internal_Update(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">ssGUI::Backend::</td><td class=\"PType\">BackendSystemInputInterface*&nbsp;</td><td class=\"PName last\">inputInterface,</td></tr><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">InputStatus&amp;&nbsp;</td><td class=\"PName last\">globalInputStatus,</td></tr><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">InputStatus&amp;&nbsp;</td><td class=\"PName last\">windowInputStatus,</td></tr><tr><td class=\"PModifierQualifier first\">ssGUI::</td><td class=\"PType\">GUIObject*&nbsp;</td><td class=\"PName last\">mainWindow</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">(Internal ssGUI function) Update function called by ssGUIManager</div></div>",1367:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1367\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> GUIObject* Clone(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">cloneChildren</td></tr></table></td><td class=\"PAfterParameters\">) = <span class=\"SHNumber\">0</span></td></tr></table></div></div><div class=\"TTSummary\">Clone function for cloning the object. Use this function instead of assignment operator or copy constructor.&nbsp; The cloned object will be allocated on the heap and the clean up will be managed by ssGUI.&nbsp; Setting cloneChildren will clone all the children recursively with all the ObjectsReferences respectively.</div></div>"});